⚙️ Algorithm:
Selection Sort

Start the program.

Find the smallest element in the unsorted portion of the array.

Swap it with the element at the beginning of the unsorted portion.

Repeat until the entire array is sorted.

Insertion Sort

For each element, compare it with all previous elements.

Shift all larger elements one position to the right.

Insert the element in the correct position.

Binary Search

Initialize low = 0 and high = n - 1.

Find the middle index: mid = (low + high) / 2.

If the middle element equals the target, return its position.

If the middle element is greater than the target, search in the left half.

Otherwise, search in the right half.

Repeat until found or low > high.

💻 Program:
import java.util.Scanner;

public class BinarySearchSort {
    
    // Selection Sort
    static void selectionSort(int arr[]) {
        int n = arr.length;
        for (int i = 0; i < n - 1; i++) {
            int minIndex = i;
            for (int j = i + 1; j < n; j++) {
                if (arr[j] < arr[minIndex])
                    minIndex = j;
            }
            int temp = arr[minIndex];
            arr[minIndex] = arr[i];
            arr[i] = temp;
        }
    }

    // Insertion Sort
    static void insertionSort(int arr[]) {
        for (int i = 1; i < arr.length; i++) {
            int key = arr[i];
            int j = i - 1;
            while (j >= 0 && arr[j] > key) {
                arr[j + 1] = arr[j];
                j--;
            }
            arr[j + 1] = key;
        }
    }

    // Binary Search
    static int binarySearch(int arr[], int key) {
        int low = 0, high = arr.length - 1;
        while (low <= high) {
            int mid = (low + high) / 2;
            if (arr[mid] == key)
                return mid;
            else if (arr[mid] < key)
                low = mid + 1;
            else
                high = mid - 1;
        }
        return -1;
    }

    // Display array
    static void display(int arr[]) {
        for (int num : arr)
            System.out.print(num + " ");
        System.out.println();
    }

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);

        System.out.print("Enter number of elements: ");
        int n = sc.nextInt();
        int arr[] = new int[n];

        System.out.println("Enter array elements:");
        for (int i = 0; i < n; i++)
            arr[i] = sc.nextInt();

        System.out.println("\nChoose sorting method:");
        System.out.println("1. Selection Sort");
        System.out.println("2. Insertion Sort");
        int choice = sc.nextInt();

        if (choice == 1)
            selectionSort(arr);
        else
            insertionSort(arr);

        System.out.println("\nSorted Array:");
        display(arr);

        System.out.print("\nEnter element to search: ");
        int key = sc.nextInt();

        int result = binarySearch(arr, key);
        if (result == -1)
            System.out.println(key + " not found in array.");
        else
            System.out.println(key + " found at position " + (result + 1));

        sc.close();
    }
}

🖥️ Sample Output:
Enter number of elements: 6
Enter array elements:
40 10 30 50 20 60

Choose sorting method:
1. Selection Sort
2. Insertion Sort
1

Sorted Array:
10 20 30 40 50 60 

Enter element to search: 40
40 found at position 4

Enter element to search: 25
25 not found in array.
